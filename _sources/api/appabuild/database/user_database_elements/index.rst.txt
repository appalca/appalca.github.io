appabuild.database.user_database_elements
=========================================

.. py:module:: appabuild.database.user_database_elements

.. autoapi-nested-parse::

   The purpose of this module is to make user database data readily writable in bw2.
   Activities and exchanges are organized in a graph-like fashion (Activities being the
   nodes, Activity producing the reference flow being the root node, Exchanges being the
   edges) to ease LCA scope-dependent features such as parameter propagation or Activity
   duplication.



Classes
-------

.. autoapisummary::

   appabuild.database.user_database_elements.Activity
   appabuild.database.user_database_elements.DatabaseElement
   appabuild.database.user_database_elements.Exchange
   appabuild.database.user_database_elements.UserDatabaseContext


Module Contents
---------------

.. py:class:: Activity

   Bases: :py:obj:`DatabaseElement`


   Contains common attributes between Activity and Exchange.


   .. py:method:: from_serialized_activity(serialized_activity: appabuild.database.serialized_data.SerializedActivity, context: UserDatabaseContext)
      :classmethod:


      Generates an Activity from a SerializedActivity object, after completing
      following steps:
      - If Activity code is already in context, generates a duplicate by adding a
      suffix to code.
      - If Activity name is already in context and activity will become an ImpactModel
      node, also make the name unique by adding a suffix to name.
      - Create Activity and add in context
      - Populate exchange attribute by creating Exchange objects
      :param serialized_activity: information required to generate Activity
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :return: generated Activity



   .. py:method:: propagate_include_in_tree(context: UserDatabaseContext)

      If an activity has include_in_tree set to False, its children should also have
      include_in_tree set to False. Propagate Activity's exchanges' include_in_tree to
      activity's exchanges' input activities.
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :return:



   .. py:method:: propagate_parameters(context: UserDatabaseContext)

      Propagate Activity's exchanges' parameter_matching to activity's exchanges'
      input activities.
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :return:



   .. py:method:: replace_parameters(parameters_matching: Dict[str, Union[str, Dict[str, numbers.Number]]])

      Replace Activity's exchanges' parameters_matching with parameters_matching keys
      by parameters matching values. Values can be constant, formulas or parameter
      name.
      :param parameters_matching: keys should be Exchange parameter to update, and
      values should be replacing value. Will be passed to all activity's exchanges.
      A float will set the parameter to a fixed value, str will update parameter's
      name or affect it to a formula, and dict is used to fix value of a categorical
      parameter.
      :return:



   .. py:method:: to_bw_format() -> Tuple[Tuple[str, str], dict]

      Converts an Activity to a format importable in a Brightway database
      :return: dictionary with all fields compatible with Brightway representation of
      Activity.



   .. py:attribute:: code
      :type:  Optional[str]
      :value: None


      Must be unique in the user database (equivalent to the notion of uuid).



   .. py:attribute:: data_quality
      :type:  Optional[dict]
      :value: None


      Deprecated.



   .. py:attribute:: database
      :type:  str

      Name of the user database.



   .. py:attribute:: exchanges
      :type:  List[Exchange]

      Emissions or consumptions generated when a unit of the activity is used.



   .. py:attribute:: include_in_tree
      :type:  Optional[bool]
      :value: False


      If True, activity will become a node in built ImpactModel.



   .. py:attribute:: location
      :type:  str

      Location of the activity. Default value is GLO for global.



   .. py:attribute:: parameters
      :type:  Optional[List[str]]
      :value: []


      Optional list of parameters necessary to execute this dataset.



   .. py:attribute:: properties
      :type:  Optional[Dict[str, Union[str, float, bool]]]

      Properties will remain on impact model, and can be used by apparun to breakdown
      the results according to life cycle phase, for exemple. Properties can be key/value
      (ex: {"phase": "production"} or flags (ex: {production_phase: True}).



   .. py:attribute:: unit
      :type:  str

      Unit of the amount.



.. py:class:: DatabaseElement

   Bases: :py:obj:`pydantic.BaseModel`


   Contains common attributes between Activity and Exchange.


   .. py:class:: Config

      .. py:attribute:: arbitrary_types_allowed
         :value: True




   .. py:attribute:: amount
      :type:  Optional[numbers.Number]
      :value: None


      Amount of output flow generated for given amount of exchanges.



   .. py:attribute:: comment
      :type:  Optional[str]
      :value: None


      Free text for any context information about the activity/exchange.



   .. py:attribute:: context
      :type:  UserDatabaseContext

      Gathers all context information necessary for generating activities. Typically
      generated by UserDatabase object.



   .. py:attribute:: name
      :type:  str

      Name of the activity/exchange.



   .. py:attribute:: type
      :type:  str

      According to Brightway, can be production, technosphere, or biosphere.



.. py:class:: Exchange

   Bases: :py:obj:`DatabaseElement`


   Exchange are connection between an input and an output dataset.


   .. py:method:: from_serialized_exchange(serialized_exchange: appabuild.database.serialized_data.SerializedExchange, context: UserDatabaseContext, calling_activity: Activity) -> List[Exchange]
      :classmethod:


      Generates an Exchange from a SerializedExchange object, after completing
      following steps:
      - Resolve input if necessary, i.e. determine its uuid
      - Resolve switch, i.e. transform a SerializedExchange with Switch to a list of
      SerializedExchange without Switch
      - Generate a new Activity for each Exchange which input database is equal to
      context database
      :param serialized_exchange: information required to generate Exchange
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :param calling_activity: Activity containing the Exchange (should be Exchange's
      output)
      :return: a list of Exchange, as resolving a Switch can lead to several Exchanges



   .. py:method:: propagate_include_in_tree(context: UserDatabaseContext)

      If an activity has include_in_tree set to False, its children should also have
      include_in_tree set to False. Check include_in_tree value of output, change
      include_in_tree value of input if needed.
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :return:



   .. py:method:: propagate_parameters(context: UserDatabaseContext)

      Propagate Exchange's parameter_matching to input activity's exchanges.
      :param context: gathers all context information necessary for generating
      activities. Typically generated by UserDatabase object.
      :return:



   .. py:method:: replace_parameters(parameters_matching: Dict[str, Union[str, Dict[str, numbers.Number], numbers.Number]])

      Replace Exchange's parameters matching with parameters_matching keys by
      parameters matching values. Values can be constant, formulas or parameter name.
      :param parameters_matching: keys should be Exchange parameter to update, and
      values should be replacing value.
      A float will set the parameter to a fixed value, str will update parameter's
      name or affect it to a formula, and dict is used to fix value of a categorical
      parameter.
      :return:



   .. py:method:: to_bw_format() -> Dict

      Converts an Exchange to a format importable in a Brightway database
      :return: dictionary with all fields compatible with Brightway representation of
      Exchange.



   .. py:method:: update_parameters_matching(new_parameters_matching: Dict[str, Union[str, Dict[str, numbers.Number], numbers.Number]])

      Update exchange's parameters_matching values according to a new
      parameters_matching dict.
      :param new_parameters_matching: each new_parameters_matching item will be
      appended to Exchange's parameters_matching attribute. Pre-existing keys will be
      overwritten.
      :return:



   .. py:attribute:: formula
      :type:  Optional[str]
      :value: None


      Scipy-compliant formula to dynamically determine quantity function of parameters.



   .. py:attribute:: input
      :type:  Union[Activity, appabuild.database.serialized_data.ActivityIdentifier]

      Input/downstream activity. If from background database, will be of type
      ActivityIdentifier.



   .. py:attribute:: output
      :type:  Activity

      Output/upstream activity.



   .. py:attribute:: parameters_matching
      :type:  Optional[Dict[str, Union[str, Dict[str, numbers.Number], numbers.Number]]]

      Name or values of input's parameters can be dynamically changed. Key is the name
      of the input parameter's name to change, and value the replacing variable. A float
      will set the parameter to a fixed value, str will update parameter's name or affect
      it to a formula, and dict is used to fix value of a categorical parameter.



.. py:class:: UserDatabaseContext

   Bases: :py:obj:`pydantic.BaseModel`


   Gathers all context information necessary for generating activities.


   .. py:attribute:: activities
      :type:  List[Activity]

      Activities already produced, necessary to update an activity's uuid and name in
      case its being used several times. Activities used several times should be
      duplicated with different uuid as it could have a different parameterization
      between different instances, and with different names as it could become independent
      ImpactModel nodes.



   .. py:attribute:: database
      :type:  appabuild.database.bw_databases.BwDatabase

      UserDatabase that is being created and populated.



   .. py:attribute:: serialized_activities
      :type:  List[appabuild.database.serialized_data.SerializedActivity]

      All serialized activities necessary to build activity tree with reference flow
      activity as a root.



