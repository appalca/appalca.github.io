appabuild.database.generator.eime
=================================

.. py:module:: appabuild.database.generator.eime


Classes
-------

.. autoapisummary::

   appabuild.database.generator.eime.EimeV6DatasetDescription
   appabuild.database.generator.eime.EimeV6Generator
   appabuild.database.generator.eime.EimeV6Impact
   appabuild.database.generator.eime.MethodEimeV6Name


Module Contents
---------------

.. py:class:: EimeV6DatasetDescription

   Bases: :py:obj:`pydantic.BaseModel`


   Information required to build serialized activities from Eime V6 exports.


   .. py:method:: to_serialized_activity(exchanges: List[appabuild.database.serialized_data.SerializedExchange]) -> appabuild.database.serialized_data.SerializedActivity

      Convert to SerializedActivity.
      :param exchanges: list of SerializedExchange
      :return: SerializedActivity readily usable by Appa Build.



   .. py:attribute:: amount
      :type:  Optional[float]
      :value: None



   .. py:attribute:: comment
      :type:  Optional[str]
      :value: None



   .. py:attribute:: data_quality
      :type:  Optional[Dict[str, int]]
      :value: None



   .. py:attribute:: database
      :type:  Optional[str]


   .. py:attribute:: include_in_tree
      :type:  Optional[bool]
      :value: False



   .. py:attribute:: location
      :type:  Optional[str]


   .. py:attribute:: name
      :type:  Optional[str]


   .. py:attribute:: name_in_export
      :type:  Optional[str]


   .. py:attribute:: type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: unit
      :type:  Optional[str]


   .. py:attribute:: uuid
      :type:  Optional[str]


.. py:class:: EimeV6Generator

   Generate yaml datasets readily usable by Appa Build from configuration file and
   Eime V6 impact exports. To generate the adequate export file, create a new Eime V6
   project, add a single phase (no particular phase name required), and add a copy of
   every dataset you want to export. Then, go to analysis page, tick all required PEF
   impact assessment method, and export the result as a xlsx file.
   Configuration file should contain all other information of the datasets you want
   to generate. Common fields across all datasets can be set once in a "default"
   dict. Specific fields can be provided as a list in a "datasets" dict. Each dataset
   should have a "name_in_export" key, which value is the name of the corresponding
   dataset in Eime V6 export.


   .. py:method:: generate_datasets(eime_v6_impacts_export_path: str, datasets_description: dict) -> List[appabuild.database.serialized_data.SerializedActivity]

       Generate yaml datasets readily usable by Appa Build.
      :param eime_v6_impacts_export_path: Eime V6 impact exports. To generate the
      adequate export file, create a new Eime V6 project, add a single phase (no
      particular phase name required), and add a copy of every dataset you want to
      export. Then, go to analysis page, tick all required PEF impact assessment
      method, and export the result as a xlsx file.
      :param datasets_description: should contain all other information of the
      datasets you want to generate. Common fields across all datasets can be set
      once in a "default" dict. Specific fields can be provided as a list in a
      "datasets" dict. Each dataset should have a "name_in_export" key, which value
      is the name of the corresponding dataset in Eime V6 export.
      :return: list of SerializedActivity readily usable by Appa Build.



   .. py:method:: parse_impacts_export(eime_v6_impacts_export_path: str) -> List[EimeV6Impact]

      Parse Eime V6 export to find every impact, with corresponding Eime V6 impact
      method name and dataset name.
      :param eime_v6_impacts_export_path: path to the export file exported by Eime V6.
      :return: a list of EimeV6impact present in the export file.



   .. py:method:: save_datasets(datasets: List[appabuild.database.serialized_data.SerializedActivity], output_path: str)

      Export SerializedActivity generated to yaml files.
      :param datasets: SerialiazedActivity datasets to save
      :param output_path: directory to save yaml files.
      :return:



   .. py:attribute:: impacts
      :type:  List[EimeV6Impact]
      :value: []



.. py:class:: EimeV6Impact

   Bases: :py:obj:`pydantic.BaseModel`


   Impact as generated by Eime V6 exports.


   .. py:method:: get_method_full_name() -> apparun.impact_methods.MethodFullName

      Convert Eime V6 export method name to Appa Run method name.
      :return: Method name known by Appa Run.



   .. py:method:: to_serialized_exchange(database: str) -> appabuild.database.serialized_data.SerializedExchange

      Transforms the impact to a SerializedExchange. Each impact will be linked to a
      impact proxy exchange. And impact proxy is an elementary flow with a
      characterisation factor of 1 to the corresponding impact method. Impact proxies
      and corresponding characterisation factors are automatically generated at Appa
      Build start up.
      :param database: name of the user database the exchange will be attached to.
      Likely the database name of the calling Activity.
      :return: SerializedExchange readily usable by Appa Build.



   .. py:attribute:: amount
      :type:  float

      Amount of impact.



   .. py:attribute:: impact_name
      :type:  str

      Method name in Eime V6 export.



   .. py:attribute:: name_in_export
      :type:  str

      Name of the dataset in Eime V6 export.



.. py:class:: MethodEimeV6Name

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Map EFV3 methods known by Appa Run with method names in Eime V6 exports.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: EFV3_ACIDIFICATION
      :value: 'PEF-AP'



   .. py:attribute:: EFV3_CLIMATE_CHANGE
      :value: 'PEF-GWP'



   .. py:attribute:: EFV3_CLIMATE_CHANGE_BIOGENIC
      :value: 'PEF-GWPb'



   .. py:attribute:: EFV3_CLIMATE_CHANGE_FOSSIL
      :value: 'PEF-GWPf'



   .. py:attribute:: EFV3_CLIMATE_CHANGE_LAND_USE
      :value: 'PEF-GWPlu'



   .. py:attribute:: EFV3_ECOTOXICITY_FRESHWATER
      :value: 'PEF-CTUe'



   .. py:attribute:: EFV3_ENERGY_RESOURCES
      :value: 'PEF-ADPf'



   .. py:attribute:: EFV3_EUTROPHICATION_FRESHWATER
      :value: 'PEF-Epf'



   .. py:attribute:: EFV3_EUTROPHICATION_MARINE
      :value: 'PEF-Epm'



   .. py:attribute:: EFV3_EUTROPHICATION_TERRESTRIAL
      :value: 'PEF-Ept'



   .. py:attribute:: EFV3_HUMAN_TOXICITY_CARCINOGENIC
      :value: 'PEF-CTUh-c'



   .. py:attribute:: EFV3_HUMAN_TOXICITY_NON_CARCINOGENIC
      :value: 'PEF-CTUh-nc'



   .. py:attribute:: EFV3_IONISING_RADIATION
      :value: 'PEF-IR'



   .. py:attribute:: EFV3_LAND_USE
      :value: 'PEF-LU'



   .. py:attribute:: EFV3_MATERIAL_RESOURCES
      :value: 'PEF-ADPe'



   .. py:attribute:: EFV3_OZONE_DEPLETION
      :value: 'PEF-ODP'



   .. py:attribute:: EFV3_PARTICULATE_MATTER_FORMATION
      :value: 'PEF-PM'



   .. py:attribute:: EFV3_PHOTOCHEMICAL_OZONE_FORMATION
      :value: 'PEF-POCP'



   .. py:attribute:: EFV3_WATER_USE
      :value: 'PEF-WU'



